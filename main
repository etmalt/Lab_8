from cellular_automata import *
import pygame
import Tests


def render_pygame(field, scr):
    scale = 15
    for y in range(0, len(field)):
        for x in range(0, len(field[0])):
            if field[y][x] == 0:
                pygame.draw.rect(scr, (255, 255, 255), (x * scale, y * scale, scale, scale))
            elif field[y][x] == 1:
                pygame.draw.rect(scr, (0, 0, 255), (x * scale, y * scale, scale, scale))
            pygame.draw.rect(scr, (0, 0, 0), (x * scale, y * scale, scale, scale), 2)


def main():
    weidth = int(input("Введите ширину поля: "))
    weidth = Tests.find_incorrect(weidth)
    height = int(input("Введите высоту поля: "))
    height = Tests.find_incorrect(height)
    life_fraction = int(input('Введите изначальное количество живых клеток: '))
    life_fraction = Tests.find_incorrect_cells(life_fraction, weidth, height)


    print("Выберите нужный клеточный автомат")
    choice = int(input('''Для реализации классической игры введите 1, 
                        автомат с жизнеспособными клетками - 2, 
                        автомат с более уязвимыми клетками - 3: '''))
    if choice == 1:
        gof = GameOfLife(weidth, height)
        gof.initialize(life_fraction)
        pygame.init()
        screen = pygame.display.set_mode((weidth*22, height*16))
        pygame.display.set_caption('Game Of Life')
        clock = pygame.time.Clock()
        is_running = True
        while is_running:
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    is_running = False
            gof.run_transition_rule()
            screen.fill((0, 0, 0))
            render_pygame(gof.field, screen)
            pygame.display.flip()
            clock.tick(60)
            pygame.time.delay(200)
    if choice == 2:
        gof = GameOfLifeLived(weidth, height)
        gof.initialize(life_fraction)
        pygame.init()
        screen = pygame.display.set_mode((weidth * 22, height * 16))
        pygame.display.set_caption('Game Of Life')
        clock = pygame.time.Clock()
        is_running = True
        while is_running:
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    is_running = False
            gof.run_transition_rule()
            screen.fill((0, 0, 0))
            render_pygame(gof.field, screen)
            pygame.display.flip()
            clock.tick(60)
            pygame.time.delay(200)
    if choice == 3:
        gof = GameOfLiveDead(weidth, height)
        gof.initialize(life_fraction)
        pygame.init()
        screen = pygame.display.set_mode((weidth * 22, height * 16))
        pygame.display.set_caption('Game Of Life')
        clock = pygame.time.Clock()
        is_running = True
        while is_running:
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    is_running = False
            gof.run_transition_rule()
            screen.fill((0, 0, 0))
            render_pygame(gof.field, screen)
            pygame.display.flip()
            clock.tick(60)
            pygame.time.delay(200)


if __name__ == '__main__':
    main()
